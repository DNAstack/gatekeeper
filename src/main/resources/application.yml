server:
  port: 8082

gatekeeper:
  # Sets up two routes for prefixes `/api/**` and `/ui/**`, respectively.
  # See comments in-line for details
  gateways:
    # For `/api/**` route. Maps:
    # * Unauthenticated requests to ${BASE_URL}/public/**
    # * Authenticated but unauthorized requests to ${BASE_URL}/registered/**
    # * Authorized requests to ${BASE_URL}/protected/**
    # Has configuration appropriate for service-to-service communication.
    - id: api
      inbound:
        # The `{*path}` expression matches all remaining path segments and is stored in a request context.
        # It can be referenced from the outbound paths below.
        # See the documentation of org.springframework.web.util.pattern.PathPattern for what can be used here.
        path: /api/{*path}
      outbound:
        # Base url for this route. All outbound requests are based off of this url.
        # The path of this url is kept as the context path. All outbound requests will be on subpaths.
        base-url: http://httpbin.org/anything/
        # You can configure custom filters for a route using the spring cloud gateway dsl
        filters:
          - AddRequestHeader=X-Request-Foo, Bar
      # An Access Control List. Evaluated in order. The last successful access level is used.
      # The first failed request can give hints that are sent as response headers.
      # This ACL supports public, registered, and controlled access levels.
      acl:
        - id: public
          authorization:
            # Public authorizer accepts all inbound requests
            method: public-authorizer
          outbound:
            # Uses path variable from inbound path expression
            path: public/{path}
        - id: registered
          authorization:
            # Valid-Token authorizer accepts all validly signed JWT from issuers configured in ${inbound.jwt}
            method: valid-token-authorizer
          outbound:
            # Uses path variable from inbound path expression
            path: registered/{path}
        - id: controlled
          authorization:
            # Controlled access grant authorizer only accepts valid tokens containing ga4gh standard
            # ControlledAccessGrants claim with value configured in args below.
            method: ga4gh-controlled-access-grant-authorizer
            # This authorizer requires value and source args. Optional `by` argument.
            args:
              value: "https://coffee.bean"
              source: "http://localhost:8081"
          outbound:
            # Uses path variable from inbound path expression
            path: protected/{path}
    # For `/ui/**` route. Maps:
    # * Authorized requests to ${BASE_URL}/protected/**
    # Other requests prompt a redirect for login. This configuration is appropriate for proxying pages
    # visited directly by a web browser.
    - id: ui
      inbound:
        # The `{*path}` expression matches all remaining path segments and is stored in a request context.
        # It can be referenced from the outbound paths below.
        # See the documentation of org.springframework.web.util.pattern.PathPattern for what can be used here.
        path: /ui/{*path}
      outbound:
        # Base url for this route. All outbound requests are based off of this url.
        # The path of this url is kept as the context path. All outbound requests will be on subpaths.
        base-url: http://httpbin.org/anything/
      # An Access Control List. Evaluated in order. The last successful access level is used.
      # The first failed request can give hints that are sent as response headers.
      # This ACL only supports controlled access requests. All other requests receive an auth-challenge.
      acl:
        - id: controlled
          authorization:
            # Controlled access grant authorizer only accepts valid tokens containing ga4gh standard
            # ControlledAccessGrants claim with value configured in args below.
            method: ga4gh-controlled-access-grant-authorizer
            # This authorizer requires value and source args. Optional `by` argument.
            args:
              value: "https://coffee.bean"
              source: "http://localhost:8081"
          outbound:
            # Uses path variable from inbound path expression
            path: protected/{path}
      # Since this route is meant for frontend applications, it redirects users to an auth server configured below.
      auth-challenge: LoginRedirect
    # For `/noop/**` route. Maps:
    # * Authorized requests to ${BASE_URL}/** with no side-effects.
    # Other routes above strip auth headers. This route uses an outbound handler that perserves the authorization header.
    - id: noop
      inbound:
        # The `{*path}` expression matches all remaining path segments and is stored in a request context.
        # It can be referenced from the outbound paths below.
        # See the documentation of org.springframework.web.util.pattern.PathPattern for what can be used here.
        path: /noop/{*path}
      outbound:
        # Base url for this route. All outbound requests are based off of this url.
        # The path of this url is kept as the context path. All outbound requests will be on subpaths.
        base-url: http://httpbin.org/anything/
        authentication:
          # Does not strip auth header
          method: preserve-authorization-client-authenticator
      # An Access Control List. Evaluated in order. The last successful access level is used.
      # The first failed request can give hints that are sent as response headers.
      # This ACL only supports controlled access requests. All other requests receive an auth-challenge.
      acl:
        - id: public
          authorization:
            # Public authorizer accepts all inbound requests
            method: public-authorizer
          outbound:
            # Uses path variable from inbound path expression
            path: /noop/{path}

  auth-server:
    authorize-url: http://localhost:8081/oauth/authorize
    token-url: http://localhost:8081/oauth/token
    client-id: gatekeeper
    client-secret: gatekeepersecret

logging:
  level:
    com.dnastack: INFO

    # set to DEBUG to log inbound and outbound HTTP headers
    com.dnastack.gatekeeper.logging.LoggingWebFilter: INFO

inbound:
  jwt:
    - issuer: http://localhost:8081
      # This is the development public key corresponding to the development private key in wallet.
      # See README for private key
      # This key is NOT used in any deployments. It is only meant for quick developer startup.
      key-source:
        bean: static-key
        args:
          publickey: |
            -----BEGIN PUBLIC KEY-----
            MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxRvdt2Mrt1ZjX4KCSdFH
            NMEuENtrZzXv8Tkd0q572PGPHPx3xnkj5qNA8BZzWsb1s+MTtyW7WGuQ0V9iipBj
            utA6X8wyGoNIEZtkWM2Xp61YMq3nNetHoW4GR7S7ILirMVO0coBHrRnsKFKMKf3Z
            jL0s8xuy1EsTMmYBb3jdMqZxOpGgyQB4t2rUfYbHkspDQqEK6qWxNkHsX8YbQucx
            qhu2ud2QWPczG3t11jdMWSF//yApyfOUn7X9fkhMxGMDQrvZ7W3BKOKZ6jYcm3vM
            40X5kGJHax0ZU2KeaVAl8qrJSE7cOiv6TxnIcBJ00isVdLggzz72xK5R9R1e9MEO
            DQIDAQAB
            -----END PUBLIC KEY-----
# Comment above and uncomment this to fetch key with JWKS (requires a issuer to support openid-configuration and JWKS endpoint.
#      key-source:
#        bean: oidc-jwks

---
spring:
  profiles: debug
logging:
  level:
    com.dnastack: DEBUG

    # set to DEBUG to log inbound and outbound HTTP headers
    com.dnastack.gatekeeper.logging.LoggingWebFilter: DEBUG
    org.springframework.cloud.gateway: TRACE
    org.springframework.http.server.reactive: TRACE
    org.springframework.web.reactive: TRACE
    reactor.ipc.netty: TRACE
    reactor.netty: TRACE
---
spring:
  profiles: all-access-beacon
gatekeeper:
  gateways:
    - id: beacon
      inbound:
        path: /beacon/{*path}
      outbound:
        base-url: ${gatekeeper.beaconServer.url}
        authentication:
          method: basic-auth-client-authenticator
          args:
            username: ${outbound.basic.username}
            password: ${outbound.basic.password}
      acl:
        - id: public
          authorization:
            method: public-authorizer
          outbound:
            path: ${gatekeeper.internal.beaconServer.public-prefix}
        - id: registered
          authorization:
            method: valid-token-authorizer
          outbound:
            path: ${gatekeeper.internal.beaconServer.registered-prefix}
        - id: controlled
          authorization:
            method: ${gatekeeper.token.authorization.method}
            args:
              # Merge args for scope and ga4gh CAG authorization so it can easily be toggled below
              value: ${gatekeeper.token.authorization.controlled-access-grant.value}
              source: ${gatekeeper.token.authorization.controlled-access-grant.source}
              scopes: ${gatekeeper.token.authorization.scopes}
          outbound:
            path: ${gatekeeper.internal.beaconServer.controlled-prefix}
      auth-challenge: NonInteractive
  beaconServer:
    url: http://httpbin.org/anything/
    public-prefix: public
    registered-prefix: registered
    controlled-prefix: protected
  token:
    authorization:
      method: ga4gh-controlled-access-grant-authorizer
      scopes: controlled
      controlled-access-grant:
        value: "https://coffee.bean"
        source: "http://localhost:8081"
  # Need these to properly resolve config values in gateway configuration (only resolves when variable is whole value)
  internal:
    beaconServer:
      public-prefix: ${gatekeeper.beaconServer.public-prefix}/{path}
      registered-prefix: ${gatekeeper.beaconServer.registered-prefix}/{path}
      controlled-prefix: ${gatekeeper.beaconServer.controlled-prefix}/{path}
# NOTE we don't want to have basic credentials anymore. We'd prefer to have gatekeeper as a sidecar intercepting
# all network traffic
outbound:
  # These are the development credentials corresponding to the development credentials in beacon server.
  # These are NOT used in any deployments. They are only meant for quick developer startup.
  basic:
    username: mssng
    password: 298d58c2-5c6f-49b6-851c-2b15ef21bd25
---
spring:
  profiles: controlled-access-beacon
gatekeeper:
  gateways:
    - id: beacon
      inbound:
        path: /beacon/{*path}
      outbound:
        base-url: ${gatekeeper.beaconServer.url}
      acl:
        - id: controlled
          authorization:
            method: ${gatekeeper.token.authorization.method}
            args:
              # Merge args for scope and ga4gh CAG authorization so it can easily be toggled below
              value: ${gatekeeper.token.authorization.controlled-access-grant.value}
              source: ${gatekeeper.token.authorization.controlled-access-grant.source}
              scopes: ${gatekeeper.token.authorization.scopes}
          outbound:
            path: ${gatekeeper.internal.beaconServer.controlled-prefix}
      auth-challenge: NonInteractive
  beaconServer:
    url: http://httpbin.org/anything/
    controlled-prefix: protected
  token:
    authorization:
      method: ga4gh-controlled-access-grant-authorizer
      scopes: controlled
      controlled-access-grant:
        value: "https://coffee.bean"
        source: "http://localhost:8081"
  # Need these to properly resolve config values in gateway configuration (only resolves when variable is whole value)
  internal:
    beaconServer:
      public-prefix: ${gatekeeper.beaconServer.public-prefix}/{path}
      registered-prefix: ${gatekeeper.beaconServer.registered-prefix}/{path}
      controlled-prefix: ${gatekeeper.beaconServer.controlled-prefix}/{path}
---
spring:
  profiles: hostpreserving-sidecar
  cloud:
    gateway:
      x-forwarded:
        proto-enabled: false
        port-enabled: false
        host-enabled: false
gatekeeper:
  gateways:
    - id: hostpreserving-sidecar
      inbound:
        path: /{*path}
      outbound:
        base-url: ${gatekeeper.outbound.url}
        filters:
          - PreserveHostHeader
      acl:
        - id: controlled
          authorization:
            method: ${gatekeeper.token.authorization.method}
            args:
              scopes: ${gatekeeper.token.authorization.scopes}
          outbound:
            path: ${gatekeeper.outbound.path-prefix}/{path}
      auth-challenge: NonInteractive
  outbound:
    url: "http://localhost:8081"
    path-prefix: ""
  token:
    authorization:
      method: scope-authorizer
      scopes: controlled

---
spring:
  profiles: registered-beacon-with-controlled-metadata
gatekeeper:
  gateways:
    - id: beacon
      inbound:
        path: /beacon/{*path}
      outbound:
        base-url: ${gatekeeper.beaconServer.url}
        authentication:
          method: basic-auth-client-authenticator
          args:
            username: ${outbound.basic.username}
            password: ${outbound.basic.password}
      acl:
        - id: registered
          authorization:
            method: valid-token-authorizer
          outbound:
            path: ${gatekeeper.internal.beaconServer.registered-prefix}
        - id: controlled
          authorization:
            method: ${gatekeeper.token.authorization.method}
            args:
              # Merge args for scope and ga4gh CAG authorization so it can easily be toggled below
              value: ${gatekeeper.token.authorization.controlled-access-grant.value}
              source: ${gatekeeper.token.authorization.controlled-access-grant.source}
              scopes: ${gatekeeper.token.authorization.scopes}
          outbound:
            path: ${gatekeeper.internal.beaconServer.controlled-prefix}
      auth-challenge: NonInteractive
    - id: metadata
      inbound:
        path: /metadata/{*path}
      outbound:
        base-url: ${gatekeeper.metadataServer.url}
        authentication:
          method: basic-auth-client-authenticator
          args:
            username: ${outbound.basic.username}
            password: ${outbound.basic.password}
      acl:
        - id: controlled
          authorization:
            method: ${gatekeeper.token.authorization.method}
            args:
              # Merge args for scope and ga4gh CAG authorization so it can easily be toggled below
              value: ${gatekeeper.token.authorization.controlled-access-grant.value}
              source: ${gatekeeper.token.authorization.controlled-access-grant.source}
              scopes: ${gatekeeper.token.authorization.scopes}
          outbound:
            path: ${gatekeeper.internal.metadataServer.controlled-prefix}
      auth-challenge: LoginRedirect
  metadataServer:
    url: http://httpbin.org/anything/
    controlled-prefix: protected
  beaconServer:
    url: http://httpbin.org/anything/
    registered-prefix: registered
    controlled-prefix: protected
  token:
    authorization:
      method: ga4gh-controlled-access-grant-authorizer
      scopes: controlled
      controlled-access-grant:
        value: "https://coffee.bean"
        source: "http://localhost:8081"
  # Need these to properly resolve config values in gateway configuration (only resolves when variable is whole value)
  internal:
    metadataServer:
      controlled-prefix: ${gatekeeper.metadataServer.controlled-prefix}/{path}
    beaconServer:
      registered-prefix: ${gatekeeper.beaconServer.registered-prefix}/{path}
      controlled-prefix: ${gatekeeper.beaconServer.controlled-prefix}/{path}
# NOTE we don't want to have basic credentials anymore. We'd prefer to have gatekeeper as a sidecar intercepting
# all network traffic
outbound:
  # These are the development credentials corresponding to the development credentials in beacon server.
  # These are NOT used in any deployments. They are only meant for quick developer startup.
  basic:
    username: mssng
    password: 298d58c2-5c6f-49b6-851c-2b15ef21bd25
